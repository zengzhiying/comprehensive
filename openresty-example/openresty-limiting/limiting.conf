worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}

http {
    lua_shared_dict my_limit_req_store 100m;
    # 设置lua脚本搜索路径 要有两个分号, 否则无法加载resty.core 注意是require导入而不是文件块嵌入
    # lua_package_path '$prefix/lua/?.lua;;';
    lua_code_cache on;
    server {
        listen 80;
        location / {
            #access_by_lua_block {
            #    local limit_req = require "resty.limit.req"

            #    local lim, err = limit_req.new("my_limit_req_store", 2, 0)

            #    if not lim then
            #        ngx.log(ngx.ERR, 
            #               "failed to instantiate a resty.limit.req object: ", err)
            #        return ngx.exit(500)
            #    end

            #    local key = ngx.var.binary_remote_addr
            #    local delay, err = lim:incoming(key, true)
            #    if not delay then
            #        if err == "rejected" then
            #            return ngx.exit(503)
            #        end
            #        ngx.log(ngx.ERR, "failed to limit req: ", err)
            #        return ngx.exit(500)
            #    end
            #    if delay >= 0.001 then
            #        local excess = err
            #        ngx.sleep(delay)
            #    end
            #}

            # 引用外部lua文件嵌入
            access_by_lua_file lua/limiting.lua;

            proxy_pass http://127.0.0.1:8088;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 代理websocket要添加下面的内容 否则会报400的错误
            proxy_http_version 1.1;
            proxy_set_header Upgrade "websocket";
            proxy_set_header Connection "upgrade";
        }
    }
}
